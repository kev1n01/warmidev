---
import { languageList } from "@/i18n/ui";
const currentUrl = Astro.url;
const currentLang = Astro.currentLocale || "es";
const n_paths = currentUrl.pathname.split("/");
let isDetailTopic = `/${currentLang}/temas/${n_paths[3]}/` === currentUrl.pathname;
let isDetailTopicEs = `/temas/${n_paths[2]}/` === currentUrl.pathname;
const { className } = Astro.props

const redirectPath = (lang: string) => {
    if (isDetailTopic) {
        return `/${lang}/temas/${n_paths[3]}/`;
    }

    if (isDetailTopicEs) {
        return `/${lang}/temas/${n_paths[2]}/`;
    }

    if (currentUrl.pathname === `/${currentLang}/temas/`) {
        return `/${lang}/temas/`;
    }
   
    if (currentUrl.pathname === `/temas/`) {
        return `/${lang}/temas/`;
    }

    if(currentUrl.pathname === `/${currentLang}/`){
        return `/${lang}/`;
    }

    if(currentUrl.pathname === `/`){
        return `/${lang}/`;
    }
};
---

<div
    class={`${className} fixed right-[8rem] xl:right-[21rem] xs:right-[6rem] 2xl:right-[23rem] mt-2.5 top-16 z-20 sm:max-w-60 max-w-96 opacity-0 invisible transition-all duration-200`}
    id="select-menu"
>
    <nav
        class="flex flex-col gap-1 p-1 text-gray-300 font-semibold text-sm sm:text-base rounded-xl border border-white/10 bg-black/25 w-full backdrop-blur-3xl shadow-inner shadow-white/50"
        id="b_el"
    >
        <a
            class="p-2 hover:bg-black/10 hover:text-white rounded-lg transition-colors cursor-pointer text-sm"
            href={currentUrl.pathname === `/temas/` ||
            currentUrl.pathname === `/${currentLang}/temas/`
                ? `/temas/`
                : currentUrl.pathname === `/temas/${n_paths[2]}/`
                  ? `/temas/${n_paths[2]}/`
                  : currentUrl.pathname ===
                      `/${currentLang}/temas/${n_paths[3]}/`
                    ? `/temas/${n_paths[3]}/`
                    : `/`}
        >
            <code class="uppercase font-semibold">PE</code>{" "}
            Español
        </a>
        {
            Object.entries(languageList).map(
                ([lang, label]: [string, string]) => {
                    const path = redirectPath(lang);
                    return (
                        <a
                            class="p-2 hover:bg-black/10 hover:text-white rounded-lg transition-colors cursor-pointer text-sm"
                            href={path}
                        >
                            <code class="uppercase font-semibold">{lang}</code>{" "}
                            {label}
                        </a>
                    );
                },
            )
        }
    </nav>
</div>

<script>
    const selectToggle = document.querySelector("#select-toggle");
    const selectLang = document.querySelector("#select-lang");
    const selectMenu = document.querySelector("#select-menu") as HTMLElement;
    const b_el = document.querySelector("#b_el");
    // Función para actualizar la posición del menú
    function updateMenuPosition() {
        if (selectToggle || selectMenu || selectLang) {
            const buttonRect = selectToggle?.getBoundingClientRect();
            const buttonRectLang = selectLang?.getBoundingClientRect();
            if (window.location.pathname === '/'){
              if (buttonRect) {
                  selectMenu.style.top = `${buttonRect.bottom + 8}px`;
              }
            }else{
              if (buttonRectLang) {
                selectMenu.style.bottom = `${buttonRectLang.top + 8}px`;
              }
            }
        }
        b_el?.classList.add("bg-black/50");
        b_el?.classList.remove("bg-black/25");
    }

    // Actualizar posición cuando se abre el menú
    selectToggle?.addEventListener("click", () => {
        selectMenu?.classList.toggle("opacity-0");
        selectMenu?.classList.toggle("opacity-100");
        selectMenu?.classList.toggle("invisible");
        selectMenu?.classList.toggle("visible");
    });

    selectLang?.addEventListener("click", () => {
        selectMenu?.classList.toggle("opacity-0");
        selectMenu?.classList.toggle("opacity-100");
        selectMenu?.classList.toggle("invisible");
        selectMenu?.classList.toggle("visible");
    });

    // Actualizar posición al hacer scroll o resize
    window.addEventListener("scroll", updateMenuPosition);
    window.addEventListener("resize", updateMenuPosition);

    // onclickOutside hide menu
    const handleClickOutside = (event: MouseEvent) => {
        if (
            selectMenu &&
            !selectMenu.contains(event.target as Node) &&
            (selectToggle &&
            !selectToggle.contains(event.target as Node) || 
            selectLang &&
            !selectLang.contains(event.target as Node))
        ) {
            selectMenu.classList.add("opacity-0");
            selectMenu.classList.add("invisible");
            selectMenu.classList.remove("visible");
        }
    };

    document.addEventListener("click", handleClickOutside);
</script>
