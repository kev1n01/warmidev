---
---

<section class="h-96 text-white pt-20 grid grid-cols-1 md:grid-cols-2 gap-20" id="hero">
    <div class="text-center sm:text-start space-y-3 content-center">
        <h1 class="text-2xl sm:text-5xl font-bold text-wrap w-[25rem] sm:w-[30rem]">
            Descubre tu potencial en la programaci√≥n
        </h1>
    </div>

    <div class="bg-gray-500/20 backdrop-blur-sm rounded-xl p-4 flex items-center justify-center h-full relative overflow-hidden" id="image-container">
        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white" id="loading-spinner"></div>
        
        <img 
            src=""
            alt="Random cat image" 
            class="absolute inset-0 w-full h-full object-cover opacity-0 transition-opacity duration-300"
            id="cat-image"
        >
        
        <div class="hidden text-center" id="error-message">
            <span class="text-xl font-bold">Error al cargar la imagen</span>
            <button class="mt-4 px-4 py-2 bg-white/10 rounded-lg hover:bg-white/20" id="retry-button">
                Intentar de nuevo
            </button>
        </div>
    </div>
</section>

<script>
    const imageContainer = document.getElementById('image-container');
    const catImage = document.getElementById('cat-image');
    const loadingSpinner = document.getElementById('loading-spinner');
    const errorMessage = document.getElementById('error-message');
    const retryButton = document.getElementById('retry-button');

    const fetchCatRandom = async () => {
        try {
            if (loadingSpinner) loadingSpinner.style.display = 'block';
            if (errorMessage) errorMessage.classList.add('hidden');
            if (catImage) catImage.style.opacity = '0';

            const response = await fetch("https://api.thecatapi.com/v1/images/search");
            
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            
            if (catImage && data[0]?.url) {
                const img = new Image();
                img.src = data[0].url;
                
                img.onload = () => {
                    if (loadingSpinner) loadingSpinner.style.display = 'none';
                    if (catImage) {
                        catImage.src = data[0].url;
                        catImage.style.opacity = '1';
                    }
                };

                img.onerror = () => {
                    throw new Error('Image failed to load');
                };
            }
        } catch (error) {
            console.error('Error fetching cat image:', error);
            if (loadingSpinner) loadingSpinner.style.display = 'none';
            if (errorMessage) errorMessage.classList.remove('hidden');
        }
    };

    fetchCatRandom();

    if (retryButton) {
        retryButton.addEventListener('click', fetchCatRandom);
    }
</script>